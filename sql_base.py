import pymysql
import telebot
from telebot import types

#root:root@127.0.0.1:3306

state = ''
bot = telebot.TeleBot('5583426666:AAGULzrXho3AgHvo-Qv-hZadur2HjP8D0NQ')

general_markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
generalbtn_1 = types.KeyboardButton('–ü–æ–∏—Å–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è üîç')
generalbtn_2 = types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö üìù')
generalbtn_3 = types.KeyboardButton('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è ‚úÖ')
generalbtn_4 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è ‚ùå')
general_markup.add(generalbtn_1, generalbtn_2, generalbtn_3, generalbtn_4)

def establish_connetion():
    connection = pymysql.connect(host='localhost',
                                 user='root',
                                 password='root',
                                 database='customers',
                                 cursorclass=pymysql.cursors.DictCursor)
    return connection

def create_record(connection, id, name, balance, address, contact_number, orders):
    with connection:
        with connection.cursor() as cursor:
            # Create a new record
            sql = f"INSERT INTO customers(`ID`, `Name`, `Balance`, `Delivery_address`, `Contact_number`, `Orders`) VALUES({id}, '{name}', {balance}, '{address}', '{contact_number}', {orders});"
            cursor.execute(sql)
            cursor.close()
        # connection is not autocommit by default. So you must commit to save
        # your changes.
        connection.commit()

def remove_record(connection, id):
    with connection:
        with connection.cursor() as cursor:
            # Create a new record
            sql = f'DELETE FROM customers WHERE ID={id};'
            cursor.execute(sql)
            cursor.close()
        # connection is not autocommit by default. So you must commit to save
        # your changes.
        connection.commit()

def get_last_id(connection):
    with connection:
        with connection.cursor() as cursor:
            # Create a new record
            sql = f'SELECT max(id) FROM customers'
            cursor.execute(sql)
            result = cursor.fetchone()
            cursor.close()
        # connection is not autocommit by default. So you must commit to save
        # your changes.
        return result['max(id)'] + 1


def read_record(connection, id):
    with connection:
        with connection.cursor() as cursor:
            # Create a new record
            sql = f'SELECT * FROM customers WHERE ID={id};'
            cursor.execute(sql)
            result = cursor.fetchone()
            cursor.close()
        # connection is not autocommit by default. So you must commit to save
        # your changes.
        return result

@bot.message_handler(content_types=['text'])
def incoming_message(message):
    global state
    if '–ü–æ–∏—Å–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è' in message.text:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')
        state = 'find_customer'
    elif '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö' in message.text:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∑–∞—Ç–µ–º –∏–º—è, –±–∞–ª–∞–Ω—Å, –∞–¥—Ä–µ—Å, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ')
        state = 'edit_data'
    elif '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è' in message.text:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è, –∞–¥—Ä–µ—Å –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ\n–ü—Ä–∏–º–µ—Ä: –ó–∏–Ω–∞–∏–¥–∞:–≥.–ú–æ—Å–∫–≤–∞, —É–ª –¢–≤–µ—Ä—Å–∫–∞—è, 6, –∫–≤ 30:79163904209')
        state = 'add_customer'
    elif '–£–¥–∞–ª–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è' in message.text:
        state = 'remove_customer'
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')
    elif state == 'add_customer':
        name, address, phone_number = message.text.split(':')
        balance = 0
        orders = 0
        create_record(establish_connetion(), get_last_id(establish_connetion()), name, balance, address, phone_number,orders)
        bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ ‚úÖ')
    elif state == 'find_customer':
        id = message.text
        information = read_record(establish_connetion(), id)
        bot.send_message(message.chat.id, f'–ò–º—è: {information["Name"]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {information["Contact_number"]}\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {information["Delivery_address"]}')
    elif state == 'edit_data':
        id, name, balance, address, phone_number, orders = message.text.split(':')
        remove_record(establish_connetion(), id)
        create_record(establish_connetion(), id, name, balance, address, phone_number, orders)
        bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ ‚úÖ')
    elif state == 'remove_customer':
        id = message.text
        remove_record(establish_connetion(), id)
        bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ ‚úÖ')

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ‚úã, \n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ üîç, \n–∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ üìù', reply_markup=general_markup)

bot.polling(none_stop=True, interval=1)

# create_record(establish_connetion(), 8, '–°–æ—Ñ–∏—è', 0, '–±–æ–ª—å—à–æ–π –ø—Ä –≤.–æ, 30', '+79516488449', 0)